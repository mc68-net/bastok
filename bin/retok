#!/usr/bin/env python3

from    os.path  import abspath, dirname, join
from    site  import addsitedir
BASEDIR = dirname(dirname(abspath(__file__)))
if __name__ == '__main__': addsitedir(join(BASEDIR, 'pylib'))

from    argparse  import ArgumentParser
from    functools  import partial
from    io  import TextIOWrapper
from    sys  import argv, stdin, stdout

from    bastok.blines  import blines
from    bastok.msx2re  import tokenize
from    bastok.msxchars import CHARMAP

####################################################################

def parseargs():
    p = ArgumentParser(description='MSX-BASIC tokenizer')
    arg = p.add_argument

    arg('-c', '--charset', default='ja',
        help='MSX charset: ja (default), int, ar, ru, etc.')
    arg('-e', '--unexpand', action='store_true',
        help='remove spaces to reduce code size')
    arg('input', nargs='?',
        help='input file (default stdin)')
    arg('output', nargs='?',
        help='output file (default stdout)')

    return p.parse_args()

def main(args):
    charmap = CHARMAP.get(args.charset)
    if charmap is None:
        die(3, 'Unknown MSX charset: {}'.format(args.charset),
            'Known charsets:',
            *[ ' {:>4}: {}'.format(k, v.description)
               for k, v in sorted(CHARMAP.items()) ]
            )

    if args.input is None:
        open_input = lambda: TextIOWrapper(stdin.buffer, encoding='UTF-8')
    else:
        open_input = partial(open, args.input, encoding='UTF-8')
    with open_input() as f:
        tlines = tokenize(charmap, blines(f.readlines()))
    # stdin is now closed if that's what we used

    open_output = lambda: stdout.buffer if args.output is None \
             else partial(open, args.output, 'wb')
    with open_output() as f:
        tlines.write_to(f)
    # stdout is now closed if that's what we used

if __name__ == '__main__':
    main(parseargs())

